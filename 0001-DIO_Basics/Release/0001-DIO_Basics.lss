
0001-DIO_Basics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000330  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000069a  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include<util/delay.h>
#include "BIT_MATH.H"

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	//DDRA =0x0f ; //0b00000001;
	SET_BIT(DDRA,0); //PA0->OUTPUT
  74:	aa e3       	ldi	r26, 0x3A	; 58
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	8c 93       	st	X, r24
	CLR_BIT(DDRA,1); //PA1->INPUT
  82:	aa e3       	ldi	r26, 0x3A	; 58
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ea e3       	ldi	r30, 0x3A	; 58
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8c 93       	st	X, r24
	SET_BIT(PORTA,1); //ENABLE PULLUP ON PA1
  90:	ab e3       	ldi	r26, 0x3B	; 59
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	eb e3       	ldi	r30, 0x3B	; 59
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8c 93       	st	X, r24

    //	_delay_ms(250);
    	//PORTB <<= 1;

    /* }*/
	if(GET_BIT(PINA,1)==0)
  9e:	e9 e3       	ldi	r30, 0x39	; 57
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	86 95       	lsr	r24
  a6:	88 2f       	mov	r24, r24
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	90 70       	andi	r25, 0x00	; 0
  ae:	00 97       	sbiw	r24, 0x00	; 0
  b0:	41 f4       	brne	.+16     	; 0xc2 <main+0x56>
		if(GET_BIT(PINA,1)==0)
		{
			TOG_BIT(PORTA,0);
			}*/

			SET_BIT(PORTA,0);
  b2:	ab e3       	ldi	r26, 0x3B	; 59
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	eb e3       	ldi	r30, 0x3B	; 59
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8c 93       	st	X, r24
  c0:	ee cf       	rjmp	.-36     	; 0x9e <main+0x32>
		}
		else
		{
			CLR_BIT(PORTA,0);
  c2:	ab e3       	ldi	r26, 0x3B	; 59
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	eb e3       	ldi	r30, 0x3B	; 59
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	8c 93       	st	X, r24
  d0:	e6 cf       	rjmp	.-52     	; 0x9e <main+0x32>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
